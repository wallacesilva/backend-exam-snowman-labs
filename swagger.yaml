swagger: "2.0"
info:
  description: "This is a sample server BackEnd Exam server."
  version: "1.0.0"
  title: "BackEnd Exam"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "contato@wallacesilva.com"
  license:
    name: "MIT Licence"
    url: "https://opensource.org/licenses/MIT"
host: "backend-exam-snowman-labs.herokuapp.com"
basePath: "/api"
tags:
- name: "tourpoints"
  description: "Everything about Tour Points (Tour Spots)"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
paths:
  /tourpoints:
    get:
      tags:
      - "tourpoints"
      summary: "Get tour points"
      description: "If logged get private tour points of user."
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "lat_long"
        description: "Geolocation of user. Latitude and Longitude. Eg. -15.54484,15.54484"
      - in: "query"
        name: "distance"
        description: "Distance from user in Kilomenters."
        default: 1
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/TourPoint"
    post:
      tags:
      - "tourpoints"
      summary: "Add a new tour point"
      description: ""
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Content that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/TourPoint"
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        400:
          description: "Invalid inputs"
  /tourpoints/me:
    get:
      tags:
      - "tourpoints"
      summary: "Get tour points registered by user"
      description: ""
      produces:
      - "application/json"
      responses:
        200:
          description: "Ok"
        401:
          description: "Unauthorized"
  /tourpoints/{id}:
    get:
      tags:
        - "tourpoints"
      summary: "Get a tour point"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of tour point to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
    put:
      tags:
      - "tourpoints"
      summary: "Update an existing tour point"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of tour point to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Tour Point object that needs to be Updated"
        required: true
        schema:
          $ref: "#/definitions/TourPoint"
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
    delete:
      tags:
      - "tourpoints"
      summary: "Delete an existing tour point"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of tour point to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Tour Point object that needs to be Deleted"
        required: true
        schema:
          $ref: "#/definitions/TourPoint"
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
  /tourpoints/{id}/checkin:
    post:
      tags:
      - "tourpoints"
      summary: "Add a new checkin of user to tour point"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of tour point to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        400:
          description: "Invalid inputs"
securityDefinitions:
  tourpoint_auth:
    type: "oauth2"
    authorizationUrl: "https://backend-exam-snowman-labs.herokuapp.com/login/facebook"
    flow: "implicit"
definitions:
  TourPoint:
    type: "object"
    required:
    - "name"
    - "latitude"
    - "longitude"
    - "category"
    - "visibility"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Snowman Labs"
      latitude:
        type: "number"
        format: "float"
      longitude:
        type: "number"
        format: "float"
      category:
        type: "string"
        format: "string"
        enum:
        - "park"
        - "museum"
        - "restaurant"
      visibility:
        type: "string"
        format: "string"
        enum:
        - "public"
        - "private"